/*         
*│版权所有：Dream1993
*│创建人：Lee        
*/  
<#@ template language="c#" HostSpecific="True" #>
<#@ output extension= ".cs" #>
<#
	TableHost host = (TableHost)(Host);	
	string DbParaHead=host.DbParaHead;
	string preParameter=host.preParameter;
	string ModelSpace = host.NameSpace+".Entity."+ host.GetModelClass(host.TableName);
	ColumnInfo identityKey=host.IdentityKey;
	string returnValue = "void";
    if (identityKey!=null)
    {         
         returnValue = CodeCommon.DbTypeToCS(identityKey.TypeName);              
    }
#>
using System.Text;
using System.Data;
using System.Linq;
using B1993.WebCommon.SQLHelper;
using MySql.Data.MySqlClient;
using System.Collections.Generic;

namespace <#= host.NameSpace #>.DAL<# if( host.Folder.Length > 0){ #>.<#= host.Folder #><# } #>
{
	/// <summary>
    /// <#= host.GetDALClass(host.TableName) #>数据访问层类
    /// </summary>
	public partial class <#= host.GetDALClass(host.TableName) #>
	{ 
		/// <summary>
		/// 增加一条数据
		/// </summary>
		public <#= returnValue #> Add(<#= host.DbHelperName#> myHelperMySQL ,<#= ModelSpace #> model)
		{
			StringBuilder strSql=new StringBuilder();
			strSql.Append("insert into <#= host.TableName #>(");			
            strSql.Append("<# for(int i=0;i< host.Fieldlist.Count;i++) {   ColumnInfo c = host.Fieldlist[i]; if (!c.IsIdentity) {#><#= c.ColumnName#><# if (i< host.Fieldlist.Count-1 ) {#>,<#}#><#}}#>");
			strSql.Append(") values (");
            strSql.Append("<# for(int i=0;i< host.Fieldlist.Count;i++) {   ColumnInfo c = host.Fieldlist[i]; if (!c.IsIdentity) {#><#=preParameter#><#= c.ColumnName#><# if (i< host.Fieldlist.Count-1 ) {#>,<#}#><#}}#>");            
            strSql.Append(") ");            
            <#if (identityKey!=null) {#>strSql.Append(";select @@IDENTITY");<#}#>	
			MySqlParameter[] parameters = {
			<# for(int i=0;i< host.Fieldlist.Count;i++)
            {   
            ColumnInfo c = host.Fieldlist[i];
            if(c.IsIdentity) continue;
            #>
            new MySqlParameter("<#=preParameter#><#=c.ColumnName#>", model.<#=c.ColumnName#>) <# if (i< host.Fieldlist.Count-1 ) {#> ,
            <# } #>
            <# } #> 
            };
            
            myHelperMySQL.ExecuteNonQuery(strSql.ToString(),parameters);		
		}
		
		/// <summary>
		/// 更新一条数据
		/// </summary>
		public int Update(<#= host.DbHelperName#> myHelperMySQL ,<#= ModelSpace #> model)
		{
			StringBuilder strSql=new StringBuilder();
			strSql.Append("update <#= host.TableName #> set ");
			<# for(int i=0;i< host.Fieldlist.Count;i++)
            {   ColumnInfo c = host.Fieldlist[i]; #>
            <# if (!c.IsIdentity) {#>            
            strSql.Append(" <#= c.ColumnName #> = <#=preParameter#><#=c.ColumnName#> <# if (i< host.Fieldlist.Count-1 ) {#>,<#}#> ");<# }#>
            <# }#>
            			
			MySqlParameter[] parameters = {
			<# for(int i=0;i< host.Fieldlist.Count;i++)
            {   
            ColumnInfo c = host.Fieldlist[i];
            if(c.IsIdentity) continue;
            #>
            new MySqlParameter("<#=preParameter#><#=c.ColumnName#>", model.<#=c.ColumnName#>) <# if (i< host.Fieldlist.Count-1 ) {#> ,
            <# } #>
            <# } #>  
            };
            
            int rows=myHelperMySQL.ExecuteNonQuery(strSql.ToString(),parameters);

			return rows;
		}
		
		 /// <summary>
        /// 更新一条数据，自定义条件和字段
        /// </summary>
        /// <param name="myDbHelperC">DbHelperC实例（数据访问类）.</param>
        /// <param name="strWhere">条件（重要）</param>
        /// <param name="filedUpdate">更新字段</param>
        /// <param name="parameters">参数</param>
        /// <returns></returns>
        public int Update(<#= host.DbHelperName#> myHelperMySQL, string strWhere, string filedUpdate, MySqlParameter[] parameters)
        {
            StringBuilder strSql = new StringBuilder();
            strSql.Append("update MessageBoard set ");
            if (filedUpdate != "")
            {
                strSql.Append(filedUpdate);

                if (strWhere.Trim() != "")
                {
                    strSql.Append(" where " + strWhere);
                }
                int rows = myHelperMySQL.ExecuteNonQuery(strSql.ToString(), parameters);
                return rows;

            }
            else
            {
                return 0;
            }
        }
		
		/// <summary>
		/// 删除一条数据
		/// </summary>
		public int Delete(<#= host.DbHelperName#> myHelperMySQL ,string strWhere, MySqlParameter[] parameters)
		{
			
			StringBuilder strSql=new StringBuilder();
			strSql.Append("delete from <#= host.TableName #> ");
			
			if (strWhere.Trim() != "")
            {
                strSql.Append(" WHERE " + strWhere);
            }

			int rows=myHelperMySQL.ExecuteNonQuery(strSql.ToString(),parameters);
			return rows;
		}
	
		/// <summary>
        /// 得到一个对象实体(List类型)中指定条件记录数，数据连接类用DbHelperC（非静态）
        /// 表：PFWebSpecialityShop a
        ///     <param name="myHelperMySQL">myHelperMySQL实例（数据访问类）.</param>
        ///     <param name="strWhere">条件.</param>
        ///     <param name="dbParameters">参数(若条件中未使用参数可为null).</param>
        /// </summary>
        public int GetListNum(<#= host.DbHelperName#> myHelperMySQL, string strWhere, MySqlParameter[] parameters)
        {
            int Num = 0;
            StringBuilder strSql = new StringBuilder();
            strSql.Append("select ");
            strSql.Append(" count(1) as Num ");
			strSql.Append("  FROM <#= host.TableName #>  ");
			
            if (strWhere.Trim() != "")
            {
                strSql.Append(" where " + strWhere);
            }

            List<<#= ModelSpace #>> myList = new List<<#= ModelSpace #>>();
            using (MySqlDataReader dr = myHelperMySQL.ExecuteReader(strSql.ToString(), parameters))
            {
                while (dr.Read())
                {
                    if (dr["Num"].ToString().Trim() != "")
                    {
                        Num = int.Parse(dr["Num"].ToString().Trim());
                    }
                }
                dr.Close();
            }
            return Num;
        }
		/// <summary>
        /// 得到一个对象实体(List类型)，数据连接类用myHelperMySQL（非静态）,查询全部数据
        /// 表：MessageBoard 
        /// <param name="myHelperMySQL">myHelperMySQL实例（数据访问类）.</param>
        /// <param name="Top">记录数.</param>
        /// <param name="strWhere">条件.</param>
        /// <param name="filedOrder">排序字段.</param>
        /// <param name="parameters">参数(若条件中未使用参数可为null).</param>
        /// </summary>
		public List<<#= ModelSpace #>> GetList(<#= host.DbHelperName#> myHelperMySQL ,int Top, string strWhere, string filedOrder, MySqlParameter[] parameters)
		{
			
			StringBuilder strSql=new StringBuilder();
			strSql.Append("select ");
			if (Top > 0)
            {
                strSql.Append(" TOP " + Top.ToString());
            }
			strSql.Append(" <# for(int i=0;i< host.Fieldlist.Count;i++) { #>a.<#= host.Fieldlist[i].ColumnName #><# if(i< host.Fieldlist.Count-1 ) {#>,<# } #> <#}#> ");			
			strSql.Append("  FROM <#= host.TableName #> a ");
			
			if (strWhere.Trim() != "")
            {
                strSql.Append(" WHERE " + strWhere);
            }
            if (filedOrder.Trim() != "")
            {
                strSql.Append(" ORDER BY " + filedOrder);
            }
            
            List<<#=ModelSpace#>> myList = new List<<#=ModelSpace#>>();
            using (MySqlDataReader dr = myHelperMySQL.ExecuteReader(strSql.ToString(), parameters))
            {
                while (dr.Read())
                {
                    <#=ModelSpace#> model = new <#=ModelSpace#>();
                    
                    <# foreach (ColumnInfo c in host.Fieldlist) { #>
					<# if(CodeCommon.DbTypeToCS(c.TypeName)=="int"||
					CodeCommon.DbTypeToCS(c.TypeName)=="long"||
					CodeCommon.DbTypeToCS(c.TypeName)=="float"||
					CodeCommon.DbTypeToCS(c.TypeName)=="DateTime"||
					CodeCommon.DbTypeToCS(c.TypeName)=="decimal")
					{#>
					if(dr["<#=c.ColumnName#>"].ToString()!="")
					{
						model.<#=c.ColumnName#>=<#=CodeCommon.DbTypeToCS(c.TypeName)#>.Parse(dr["<#=c.ColumnName#>"].ToString());
					}
					<# } #>
					<# if(CodeCommon.DbTypeToCS(c.TypeName)=="string") {#>
					model.<#=c.ColumnName#>= dr["<#=c.ColumnName#>"].ToString();
					<# } #>
					<# if(CodeCommon.DbTypeToCS(c.TypeName)=="byte[]") {#>
					if(dr["<#=c.ColumnName#>"].ToString()!="")
					{
						model.<#=c.ColumnName#>= (byte[])dr["<#=c.ColumnName#>"];
					}
					<# } #>
					<# if(CodeCommon.DbTypeToCS(c.TypeName)=="Guid") {#>
					if(dr["<#=c.ColumnName#>"].ToString()!="")
					{
						model.<#=c.ColumnName#>= dr["<#=c.ColumnName#>"].ToString();
					}
					<# } #>
					<# if(CodeCommon.DbTypeToCS(c.TypeName)=="bool") {#>
					if(dr["<#=c.ColumnName#>"].ToString()!="")
					{
						if((dr["<#=c.ColumnName#>"].ToString()=="1")||(dr["<#=c.ColumnName#>"].ToString().ToLower()=="true"))
						{
						model.<#=c.ColumnName#>= true;
						}
						else
						{
						model.<#=c.ColumnName#>= false;
						}
					}
					<# } #>
					<# } #>

                    myList.Add(model);
                }
                dr.Close();
            }
            return myList;
		}
		
		 /// <summary>
        /// 得到一个对象实体(List类型)，数据连接类用myHelperMySQL（非静态）
        /// 表：MessageBoard 
        /// <param name="myHelperMySQL">myHelperMySQL实例（数据访问类）.</param>
        /// <param name="Top">记录数.</param>
        /// <param name="filedSelect">自定义字段.</param> 
        /// <param name="strWhere">条件.</param>
        /// <param name="filedOrder">排序字段.</param>
        /// <param name="parameters">参数(若条件中未使用参数可为null).</param>
        /// </summary>
		public List<<#= ModelSpace #>> GetList(<#= host.DbHelperName#> myHelperMySQL ,int Top, string filedSelect, string strWhere, string filedOrder, MySqlParameter[] parameters)
		{
			
			StringBuilder strSql=new StringBuilder();
			strSql.Append("select ");
			if (Top > 0)
            {
                strSql.Append(" TOP " + Top.ToString());
            }
			//自定义字段
            strSql.Append(" " + filedSelect);
			strSql.Append("  FROM <#= host.TableName #> a  ");
			
			if (strWhere.Trim() != "")
            {
                strSql.Append(" WHERE " + strWhere);
            }
            if (filedOrder.Trim() != "")
            {
                strSql.Append(" ORDER BY " + filedOrder);
            }
            
            List<<#=ModelSpace#>> myList = new List<<#=ModelSpace#>>();
            using (MySqlDataReader dr = myHelperMySQL.ExecuteReader(strSql.ToString(), parameters))
            {
                while (dr.Read())
                {
                    <#=ModelSpace#> model = new <#=ModelSpace#>();
                    
                    <# foreach (ColumnInfo c in host.Fieldlist) { #>
	                if (filedSelect.ToLower().Split(',').Where(x => x.Trim() == "a.<#=c.ColumnName.ToLower()#>").Count() > 0)
	                {
					<# if(CodeCommon.DbTypeToCS(c.TypeName)=="int"||
					CodeCommon.DbTypeToCS(c.TypeName)=="long"||
					CodeCommon.DbTypeToCS(c.TypeName)=="float"||
					CodeCommon.DbTypeToCS(c.TypeName)=="DateTime"||
					CodeCommon.DbTypeToCS(c.TypeName)=="decimal")
					{#>
					if(dr["<#=c.ColumnName#>"].ToString()!="")
					{
						model.<#=c.ColumnName#>=<#=CodeCommon.DbTypeToCS(c.TypeName)#>.Parse(dr["<#=c.ColumnName#>"].ToString());
					}
					<# } #>
					<# if(CodeCommon.DbTypeToCS(c.TypeName)=="string") {#>
					model.<#=c.ColumnName#>= dr["<#=c.ColumnName#>"].ToString();
					<# } #>
					<# if(CodeCommon.DbTypeToCS(c.TypeName)=="byte[]") {#>
					if(dr["<#=c.ColumnName#>"].ToString()!="")
					{
						model.<#=c.ColumnName#>= (byte[])dr["<#=c.ColumnName#>"];
					}
					<# } #>
					<# if(CodeCommon.DbTypeToCS(c.TypeName)=="Guid") {#>
					if(dr["<#=c.ColumnName#>"].ToString()!="")
					{
						model.<#=c.ColumnName#>= dr["<#=c.ColumnName#>"].ToString();
					}
					<# } #>
					<# if(CodeCommon.DbTypeToCS(c.TypeName)=="bool") {#>
					if(dr["<#=c.ColumnName#>"].ToString()!="")
					{
						if((dr["<#=c.ColumnName#>"].ToString()=="1")||(dr["<#=c.ColumnName#>"].ToString().ToLower()=="true"))
						{
						model.<#=c.ColumnName#>= true;
						}
						else
						{
						model.<#=c.ColumnName#>= false;
						}
					}
					<# } #>
					} 
					<# } #>

                    myList.Add(model);
                }
                dr.Close();
            }
            return myList;
		}

	}
}